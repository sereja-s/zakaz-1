<?php

namespace core\base\controller;

/** 
 * ШАБЛОН ПРОЕКТИРОВАНИЯ Singleton
 * 
 * (при создании любого количества объектов класса, использующего этот шаблон, это будет один и тот же объект класса, 
 * который хранится в статическом свойстве $_instance данного класса) Шаблон не допустит дублирование объектов, например 
 * чтобы избежать увеличения нагрузки и утечек памяти 
 */
trait Singleton
{
	static private $_instance; // ссылка на объект класса, который хранится в данном свойстве

	private function __construct()
	{
	}

	private function __clone()
	{
	}

	/**
	 * Метод создаёт объект класса (если он ещё не был создан)
	 */
	static public function instance()
	{
		// в статическом контексте, конструкция $this не доступна 
		// (т.к. она является ссылкой на объект класса, а объкта класса здесь не существует Мы просто ипользуем метод класса, не создавая объект) 
		// Здесь используется конструкция (ключевое слово) self которая,означает ,что мы ссылаемся на наш собственный класс)

		// сделаем проверку выполнения условия:
		// проверяем хранится ли в свойстве нашего класса self::$_instance 
		// (такую проверку осуществляет конструкция instanceof), объект self нашего класса в котором мы работаем
		if (self::$_instance instanceof self) {
			// если да, то мы вернём это свойство 
			return self::$_instance;
		}

		// если объекта нет, то вернём это свойство в которое будет записан (сохранён) не объект нашего класса, а ссылка на объект (т.е.самого себя)
		self::$_instance = new self;

		// если у свойства: self::$_instance есть метод класса BaseModel: connect (метод в котором будем осуществлять подключения к БД)
		if (method_exists(self::$_instance, 'connect')) {

			// то вызовем его
			self::$_instance->connect();
		}

		return self::$_instance;
	}
}
